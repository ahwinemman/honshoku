Summary from: https://www.callicoder.com/java-concurrency-multithreading-basics/

Concurrency is the ability to do more than one thing at the same time.
Concurrency doesn’t necessarily involve multiple applications. Running multiple parts of a single application simultaneously is also termed as concurrency.

For example -
A word processor formats the text and responds to keyboard events, at the same time.
When we say - “multiple tasks are executing at the same time”, what we actually mean is that “multiple tasks are making progress during the same period of time.”

The tasks are executed in an interleaved manner.
The operating system switches between the tasks so frequently that it appears to the users that they are being executed at the same physical instant.

Therefore, Concurrency does not mean Parallelism. In fact, Parallelism is impossible on a single processor system.



Unit of Concurrency
Concurrency is a very broad term, and it can be used at various levels.

For example -
Multiprocessing - Multiple Processors/CPUs executing concurrently. The unit of concurrency here is a CPU.

Multitasking - Multiple tasks/processes running concurrently on a single CPU. The operating system executes these tasks by switching between them very frequently.
The unit of concurrency, in this case, is a Process.

Multithreading - Multiple parts of the same program running concurrently.
In this case, we go a step further and divide the same program into multiple parts/threads and run those threads concurrently.

Processes and Threads
Let’s talk about the two basic units of concurrency : Processes and Threads.

Process
A Process is a program in execution. It has its own address space, a call stack, and link to any resources such as open files.
A computer system normally has multiple processes running at a time. The operating system keeps track of all these processes and facilitates their execution by sharing the processing time of the CPU among them.

Thread
A thread is a path of execution within a process. Every process has at least one thread - called the main thread. The main thread can create additional threads within the process.
Threads within a process share the process’s resources including memory and open files. However, every thread has its own call stack.
Since threads share the same address space of the process, creating new threads and communicating between them is more efficient.

Common Problems associated with Concurrency
Concurrency greatly improves the throughput of computers by increasing CPU utilization. But with great performance comes few issues -

Thread interference errors (Race Conditions) : Thread interference errors occur when multiple threads try to read and write a shared variable concurrently,
and these read and write operations overlap in execution.
In this case, the final result depends on the order in which the reads and writes take place, which is unpredictable. This makes thread interference errors difficult to detect and fix.
Thread interference errors can be avoided by ensuring that only one thread can access a shared resource at a time.
This is usually done by acquiring a mutually exclusive lock before accessing any shared resource.

The concept of acquiring a lock before accessing any shared resource can lead to other problems like deadlock and starvation.
We’ll learn about these problems and their solution in future tutorials.

Memory consistency errors : Memory consistency errors occur when different threads have inconsistent views of the same data.
This happens when one thread updates some shared data, but this update is not propagated to other threads, and they end up using the old data.

Executor Framework
Enter Executors, A framework for creating and managing threads. Executors framework helps you with -

Thread Creation: It provides various methods for creating threads, more specifically a pool of threads, that your application can use to run tasks concurrently.

Thread Management: It manages the life cycle of the threads in the thread pool.
You don’t need to worry about whether the threads in the thread pool are active or busy or dead before submitting a task for execution.

Task submission and execution: Executors framework provides methods for submitting tasks for execution in the thread pool,
and also gives you the power to decide when the tasks will be executed.
For example, You can submit a task to be executed now or schedule them to be executed later or make them execute periodically.

Java Concurrency API defines the following three executor interfaces that covers everything that is needed for creating and managing threads -

Executor - A simple interface that contains a method called execute() to launch a task specified by a Runnable object.

ExecutorService - A sub-interface of Executor that adds functionality to manage the lifecycle of the tasks.
It also provides a submit() method whose overloaded versions can accept a Runnable as well as a Callable object.
Callable objects are similar to Runnable except that the task specified by a Callable object can also return a value. We’ll learn about Callable in more detail, in the next blog post.

ScheduledExecutorService - A sub-interface of ExecutorService. It adds functionality to schedule the execution of the tasks.

Apart from the above three interfaces, The API also provides an Executors class that contains factory methods for creating different kinds of executor services.